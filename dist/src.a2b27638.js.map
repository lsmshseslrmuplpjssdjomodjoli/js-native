{"version":3,"sources":["src/index.js"],"names":["numArr","newNumArr","filter","num","console","log"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAMA,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC9B,IAAMC,SAAS,GAAGD,MAAM,CAACE,MAAM,CAAC,UAACC,GAAG,EAAK;EACvCC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;AAClB,CAAC,CAAC","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["// const myProfile = {\n//   name: \"ぴよ\",\n//   age: 13\n//};\n\n// const mesg = `名前「${myProfile.name}」年齢「${myProfile.age}」`;\n// console.log(mesg);\n\n// const { name, age } = myProfile;\n// const mesg = `名前「${name}」年齢「${age}」`;\n// console.log(mesg);\n\n// const sayHello = (name = \"ふが\") => {\n//   console.log(`こんにちは「${name}」さん`);\n// };\n\n// console.log(sayHello());\n\n// // スプレッド構文「...」(3個のドット)\n// const arr1 = [1, 2];\n// const sumFunc = (n1, n2) => console.log(n1 + n2);\n// sumFunc(arr1[0], arr1[1]);\n// sumFunc(...arr1); // 上記と同じ. Python の *arr1 と同じである✅\n\n// const arr2 = [1, 2, 3, 4, 5];\n// const [n1, n2, ...arr3] = arr2;\n\n// console.log(n1);\n// console.log(n2);\n// console.log(arr3);\n\n// 🟢03　スプレッド構文「...」(3個のドット)\n// const arr4 = [10, 20];\n// const arr5 = [30, 40];\n// const arr6 = [...arr4]; // arr6 は [10, 20] である。ただし shallow copy であるが、プリミティブ型なので deep copy となる。\n// const arr7 = [...arr4, ...arr5]; // arr7 は [10, 20, 30, 40] である。ただし shallow copy である。プリミティブ型なので deep copy となる。\n// console.log(`arr6 => ${arr6}`);\n// console.log(`arr7 => ${arr7}`);\n\n// 🟣01　map\n// 従来の記法\n// const nameArr = [\"田中\", \"山田\", \"鈴木\"];\n// for (let index = 0; index < nameArr.length; index++) {\n//   console.log(nameArr[index]);\n//}\n\n// ES6 の記法\n//const nameArr = [\"田中\", \"山田\", \"鈴木\"];\n// (1) まずは空っぽのアロー関数を書く\n// const nameArr2 = nameArr.map( ( ) => { } )\n//\n// (2)  配列 nameArr2 の要素を name として1個ずつ受け取る\n// const nameArr2 = nameArr.map( ( name) => { } )\n//\n// (3) 要素を1回ずつ返却する\n// const nameArr2 = nameArr.map((name) => {\n//   return name;\n// });\n// console.log(nameArr2); //  [\"田中\", \"山田\", \"鈴木\"] という結果になる\n\n//✅ python だと、次のような表現になる\n// nameArr2 = [ name for name in nameArr ]\n\nconst numArr = [1, 2, 3, 4, 5];\nconst newNumArr = numArr.filter((num) => {\n  console.log(num);\n});\n"]}